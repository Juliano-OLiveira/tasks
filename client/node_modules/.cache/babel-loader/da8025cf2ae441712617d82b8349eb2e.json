{"ast":null,"code":"var _jsxFileName = \"/root/Documents/testapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from './components/header';\nimport CRUDs from './components/corpo/crud.js';\nimport Footer from './components/footer/footer.js';\nimport './components/footer/index.css';\nimport './App.css';\nimport '../node_modules/flexboxgrid/css/flexboxgrid.min.css';\nimport Modal from 'react-modal';\nimport Axios from 'axios';\nimport Configs from './config';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveTask = event => {\n      event.preventDefault();\n      console.log(event);\n      let position = event.target.position.value;\n      let id = event.target._id.value;\n\n      if (position !== '-1') {\n        this.updateTask(id, position, event);\n      } else {\n        this.createCruds(event);\n      }\n    };\n\n    this.createCruds = event => {\n      event.preventDefault();\n      let cruds = [...this.state.tasks];\n      Axios.post(Configs.urlToServer, {\n        task: this.newCruds(event)\n      }).then(response => {\n        cruds.push(response.data);\n        this.setState({\n          tasks: cruds\n        });\n        this.closeModal();\n        console.log(response);\n        this.unsfinished();\n      }).catch(error => {\n        console.log(error);\n      });\n      this.finished();\n      this.closeModal();\n    };\n\n    this.delete = index => {\n      let task = this.state.tasks;\n      Axios.delete(Configs.urlDeletar, {\n        index\n      }).then(response => {\n        task.splice(index, 1);\n        this.setState({\n          task: task\n        });\n        console.log(response);\n        this.unsfinished();\n        this.finished();\n      });\n    };\n\n    this.editar = tarefa => {\n      this.setState({\n        taskAtrr: tarefa\n      });\n      this.setState({\n        modalIsOpen: true\n      }); // console.log(\"Editando\");\n    };\n\n    this.openModal = () => {\n      this.setState({\n        modalIsOpen: true\n      });\n    };\n\n    this.afterOpenModal = () => {\n      // references are now sync'd and can be accessed.\n      this.subtitle.style.color = '#f00';\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        modalIsOpen: false\n      });\n    };\n\n    this.state = {\n      unsfinished: 0,\n      finished: 0,\n      taskAtrr: '',\n      concluir: 'Resolvido',\n      modalIsOpen: false,\n      tasks: []\n    };\n    this.unsfinished();\n    this.finished();\n  }\n\n  async componentDidMount() {\n    // fetch('http://localhost:3000/tasks')\n    // .then(res => res.json())\n    // .then(result => {\n    //   this.setState({tasks: result})\n    // })\n    // ,error => console.log(error)\n    // Axios.get(Configs.urlToServer)\n    // .then(response =>{\n    //   this.setState({tasks: response.data})\n    // })\n    // .catch(error =>{\n    //   console.log(error);\n    // })\n    let response = await Axios.get(Configs.urlToServer);\n    this.setState({\n      tasks: response.data\n    });\n  }\n\n  updateTask(id, position, event) {\n    console.log(event);\n    let newtask = {\n      _id: id,\n      title: event.target.title.value,\n      status: false\n    };\n    console.log(newtask);\n    Axios.put(Configs.urlToServer, {\n      task: newtask\n    });\n    event.preventDefault();\n    let dados = [...this.state.tasks];\n    dados[position] = this.newCruds(event);\n    this.setState({\n      tasks: dados\n    });\n    this.closeModal();\n  } // filterValue = (id) => {\n  //   return this.state.tasks.find = (tasks) => {\n  //     return tasks._id = id;\n  //   }\n  // }\n\n\n  newCruds(event) {\n    let crud = {\n      title: event.target.title.value,\n      categoria: event.target.categoria.value,\n      textarea: event.target.textarea.value,\n      descricao: event.target.descricao.value,\n      status: true\n    };\n    return crud;\n  }\n\n  async unsfinished() {\n    let a = await this.counterTask(true);\n    console.log(a);\n    this.setState({\n      unsfinished: a\n    });\n  }\n\n  async finished() {\n    let a = await this.counterTask(false);\n    this.setState({\n      finished: a\n    });\n  }\n\n  async counterTask(type = true) {\n    let counter = await Axios.get(Configs.urlToServer + '/counter?type=' + type);\n    return counter.data;\n  }\n\n  concluir(index) {\n    let task = this.state.tasks; //task.splice(index, 1);\n    // this.setState({ task: task })\n\n    alert('Tarefa Resolvida');\n    console.log('Concluindo'); // this.unsfinished();\n    // this.finished();\n\n    Axios.put(Configs.urlToServer, {\n      tasks: task\n    }).then(response => {\n      task.splice(index, 1);\n      this.setState({\n        tasks: task\n      }); // this.setState({status:false});\n\n      console.log(response);\n      this.finished();\n      this.unsfinished();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Gerencidor de Apps\",\n      unsfinished: this.state.unsfinished,\n      finished: this.state.finished,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"CRUDs row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, this.state.tasks.map((tarefa, index) => {\n      return React.createElement(CRUDs, {\n        key: index,\n        value: tarefa,\n        className: \"col-xs-12 col-sm-8 col-md-6 col-lg-4\",\n        delete: this.delete.bind(this, index),\n        editar: this.editar.bind(this, tarefa),\n        concluir: this.concluir.bind(this, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      });\n    })), React.createElement(Footer, {\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      ariaHideApp: false,\n      isOpen: this.state.modalIsOpen,\n      onAfterOpen: this.afterOpenModtabelasal,\n      onRequestClose: this.closeModal,\n      className: \"Modal\",\n      contentLabel: \"Example Modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.closeModal,\n      className: \"close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \" x \"), React.createElement(\"h2\", {\n      ref: subtitle => this.subtitle = subtitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Adicionar Tarefas\")), React.createElement(\"form\", {\n      onSubmit: this.saveTask.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Titulo\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      ref: \"title\",\n      defaultValue: this.state.taskAtrr.title,\n      placeholder: \"Titulo..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"categoria\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Categoria\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"lname\",\n      name: \"categoria\",\n      defaultValue: this.state.taskAtrr.categoria,\n      placeholder: \"Categoria..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"descricao\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"Descri\\xE7\\xE3o\"), React.createElement(\"textarea\", {\n      name: \"textarea\",\n      rows: \"10\",\n      cols: \"94\",\n      id: \"descricao\",\n      defaultValue: this.state.taskAtrr.descricao,\n      className: \"textarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"position\",\n      defaultValue: this.state.tasks.indexOf(this.state.taskAtrr),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"_id\",\n      defaultValue: this.state.taskAtrr._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Enviar\",\n      name: \"bt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/root/Documents/testapp/client/src/App.js"],"names":["React","Component","Header","CRUDs","Footer","Modal","Axios","Configs","App","constructor","props","saveTask","event","preventDefault","console","log","position","target","value","id","_id","updateTask","createCruds","cruds","state","tasks","post","urlToServer","task","newCruds","then","response","push","data","setState","closeModal","unsfinished","catch","error","finished","delete","index","urlDeletar","splice","editar","tarefa","taskAtrr","modalIsOpen","openModal","afterOpenModal","subtitle","style","color","concluir","componentDidMount","get","newtask","title","status","put","dados","crud","categoria","textarea","descricao","a","counterTask","type","counter","alert","render","map","bind","afterOpenModtabelasal","indexOf"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAO,+BAAP;AAEA,OAAO,WAAP;AACA,OAAO,qDAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;;AAIA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAC1BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiFnBC,QAjFmB,GAiFTC,KAAD,IAAU;AACjBA,MAAAA,KAAK,CAACC,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,UAAII,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAaD,QAAb,CAAsBE,KAArC;AACA,UAAIC,EAAE,GAAGP,KAAK,CAACK,MAAN,CAAaG,GAAb,CAAiBF,KAA1B;;AAEA,UAAIF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,aAAKK,UAAL,CAAgBF,EAAhB,EAAoBH,QAApB,EAA8BJ,KAA9B;AACD,OAFD,MAEO;AAEL,aAAKU,WAAL,CAAiBV,KAAjB;AACD;AAIF,KAhGkB;;AAAA,SAiInBU,WAjImB,GAiIJV,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACC,cAAN;AAGA,UAAIU,KAAK,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWC,KAAf,CAAZ;AAGAnB,MAAAA,KAAK,CAACoB,IAAN,CAAWnB,OAAO,CAACoB,WAAnB,EAAgC;AAAEC,QAAAA,IAAI,EAAE,KAAKC,QAAL,CAAcjB,KAAd;AAAR,OAAhC,EACGkB,IADH,CACQC,QAAQ,IAAI;AAChBR,QAAAA,KAAK,CAACS,IAAN,CAAWD,QAAQ,CAACE,IAApB;AAGA,aAAKC,QAAL,CAAc;AAAET,UAAAA,KAAK,EAAEF;AAAT,SAAd;AACA,aAAKY,UAAL;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACA,aAAKK,WAAL;AAED,OAVH,EAWGC,KAXH,CAWSC,KAAK,IAAI;AACdxB,QAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAZ;AACD,OAbH;AAiBA,WAAKC,QAAL;AAGA,WAAKJ,UAAL;AAED,KA9JkB;;AAAA,SAiKnBK,MAjKmB,GAiKTC,KAAD,IAAW;AAElB,UAAIb,IAAI,GAAG,KAAKJ,KAAL,CAAWC,KAAtB;AAGAnB,MAAAA,KAAK,CAACkC,MAAN,CAAajC,OAAO,CAACmC,UAArB,EAAiC;AAAED,QAAAA;AAAF,OAAjC,EACGX,IADH,CACQC,QAAQ,IAAI;AAEhBH,QAAAA,IAAI,CAACe,MAAL,CAAYF,KAAZ,EAAmB,CAAnB;AACA,aAAKP,QAAL,CAAc;AAAEN,UAAAA,IAAI,EAAEA;AAAR,SAAd;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACA,aAAKK,WAAL;AACA,aAAKG,QAAL;AAGD,OAVH;AAYD,KAlLkB;;AAAA,SAoLnBK,MApLmB,GAoLTC,MAAD,IAAY;AAEnB,WAAKX,QAAL,CAAc;AAAEY,QAAAA,QAAQ,EAAED;AAAZ,OAAd;AACA,WAAKX,QAAL,CAAc;AAAEa,QAAAA,WAAW,EAAE;AAAf,OAAd,EAHmB,CAMnB;AACD,KA3LkB;;AAAA,SA4NnBC,SA5NmB,GA4NP,MAAM;AAEhB,WAAKd,QAAL,CAAc;AAAEa,QAAAA,WAAW,EAAE;AAAf,OAAd;AAED,KAhOkB;;AAAA,SAkOnBE,cAlOmB,GAkOF,MAAM;AACrB;AACA,WAAKC,QAAL,CAAcC,KAAd,CAAoBC,KAApB,GAA4B,MAA5B;AAGD,KAvOkB;;AAAA,SAyOnBjB,UAzOmB,GAyON,MAAM;AACjB,WAAKD,QAAL,CAAc;AAAEa,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD,KA3OkB;;AAIjB,SAAKvB,KAAL,GAAa;AACXY,MAAAA,WAAW,EAAE,CADF;AAEXG,MAAAA,QAAQ,EAAE,CAFC;AAGXO,MAAAA,QAAQ,EAAE,EAHC;AAIXO,MAAAA,QAAQ,EAAE,WAJC;AAMXN,MAAAA,WAAW,EAAE,KANF;AAOXtB,MAAAA,KAAK,EAAE;AAPI,KAAb;AAUA,SAAKW,WAAL;AACA,SAAKG,QAAL;AAMD;;AAID,QAAMe,iBAAN,GAA0B;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAIvB,QAAQ,GAAG,MAAMzB,KAAK,CAACiD,GAAN,CAAUhD,OAAO,CAACoB,WAAlB,CAArB;AACA,SAAKO,QAAL,CAAc;AAAET,MAAAA,KAAK,EAAEM,QAAQ,CAACE;AAAlB,KAAd;AACD;;AAIDZ,EAAAA,UAAU,CAAGF,EAAH,EAAOH,QAAP,EAAiBJ,KAAjB,EAAuB;AAC/BE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAGA,QAAI4C,OAAO,GAAG;AACZpC,MAAAA,GAAG,EAAED,EADO;AAEZsC,MAAAA,KAAK,EAAE7C,KAAK,CAACK,MAAN,CAAawC,KAAb,CAAmBvC,KAFd;AAGZwC,MAAAA,MAAM,EAAE;AAHI,KAAd;AAQA5C,IAAAA,OAAO,CAACC,GAAR,CAAYyC,OAAZ;AACAlD,IAAAA,KAAK,CAACqD,GAAN,CAAUpD,OAAO,CAACoB,WAAlB,EAA+B;AAAEC,MAAAA,IAAI,EAAE4B;AAAR,KAA/B;AACE5C,IAAAA,KAAK,CAACC,cAAN;AAEE,QAAI+C,KAAK,GAAG,CAAC,GAAG,KAAKpC,KAAL,CAAWC,KAAf,CAAZ;AACAmC,IAAAA,KAAK,CAAC5C,QAAD,CAAL,GAAkB,KAAKa,QAAL,CAAcjB,KAAd,CAAlB;AAEA,SAAKsB,QAAL,CAAc;AAAET,MAAAA,KAAK,EAAEmC;AAAT,KAAd;AAGF,SAAKzB,UAAL;AAEH,GAvEyB,CAyE1B;AAGA;AACA;AAEA;AACA;;;AAoBAN,EAAAA,QAAQ,CAACjB,KAAD,EAAQ;AACd,QAAIiD,IAAI,GAAG;AAETJ,MAAAA,KAAK,EAAE7C,KAAK,CAACK,MAAN,CAAawC,KAAb,CAAmBvC,KAFjB;AAGT4C,MAAAA,SAAS,EAAElD,KAAK,CAACK,MAAN,CAAa6C,SAAb,CAAuB5C,KAHzB;AAIT6C,MAAAA,QAAQ,EAAEnD,KAAK,CAACK,MAAN,CAAa8C,QAAb,CAAsB7C,KAJvB;AAKT8C,MAAAA,SAAS,EAAEpD,KAAK,CAACK,MAAN,CAAa+C,SAAb,CAAuB9C,KALzB;AAOTwC,MAAAA,MAAM,EAAE;AAPC,KAAX;AASA,WAAOG,IAAP;AACD;;AAED,QAAMzB,WAAN,GAAoB;AAClB,QAAI6B,CAAC,GAAG,MAAM,KAAKC,WAAL,CAAiB,IAAjB,CAAd;AACApD,IAAAA,OAAO,CAACC,GAAR,CAAYkD,CAAZ;AACA,SAAK/B,QAAL,CAAc;AAAEE,MAAAA,WAAW,EAAE6B;AAAf,KAAd;AAED;;AACD,QAAM1B,QAAN,GAAiB;AACf,QAAI0B,CAAC,GAAG,MAAM,KAAKC,WAAL,CAAiB,KAAjB,CAAd;AACA,SAAKhC,QAAL,CAAc;AAAEK,MAAAA,QAAQ,EAAE0B;AAAZ,KAAd;AACD;;AAED,QAAMC,WAAN,CAAkBC,IAAI,GAAG,IAAzB,EAA+B;AAC7B,QAAIC,OAAO,GAAG,MAAM9D,KAAK,CAACiD,GAAN,CAAUhD,OAAO,CAACoB,WAAR,GAAsB,gBAAtB,GAAyCwC,IAAnD,CAApB;AACA,WAAOC,OAAO,CAACnC,IAAf;AACD;;AA+DDoB,EAAAA,QAAQ,CAACZ,KAAD,EAAQ;AAEd,QAAIb,IAAI,GAAG,KAAKJ,KAAL,CAAWC,KAAtB,CAFc,CAId;AACA;;AACA4C,IAAAA,KAAK,CAAC,kBAAD,CAAL;AAEAvD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EARc,CASd;AACA;;AAEAT,IAAAA,KAAK,CAACqD,GAAN,CAAUpD,OAAO,CAACoB,WAAlB,EAA+B;AAAEF,MAAAA,KAAK,EAAEG;AAAT,KAA/B,EACGE,IADH,CACQC,QAAQ,IAAI;AAEhBH,MAAAA,IAAI,CAACe,MAAL,CAAYF,KAAZ,EAAmB,CAAnB;AAEA,WAAKP,QAAL,CAAc;AAAET,QAAAA,KAAK,EAAEG;AAAT,OAAd,EAJgB,CAKhB;;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACA,WAAKQ,QAAL;AACA,WAAKH,WAAL;AAGD,KAZH;AAcD;;AAyBDkC,EAAAA,MAAM,GAAG;AAEP,WAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,oBAAd;AACE,MAAA,WAAW,EAAE,KAAK9C,KAAL,CAAWY,WAD1B;AAEE,MAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWe,QAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EASE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKf,KAAL,CAAWC,KAAX,CAAiB8C,GAAjB,CAAqB,CAAC1B,MAAD,EAASJ,KAAT,KAAmB;AAEvC,aAAO,oBAAE,KAAF;AAEL,QAAA,GAAG,EAAEA,KAFA;AAGL,QAAA,KAAK,EAAEI,MAHF;AAIL,QAAA,SAAS,EAAC,sCAJL;AAKL,QAAA,MAAM,EAAE,KAAKL,MAAL,CAAYgC,IAAZ,CAAiB,IAAjB,EAAuB/B,KAAvB,CALH;AAML,QAAA,MAAM,EAAE,KAAKG,MAAL,CAAY4B,IAAZ,CAAiB,IAAjB,EAAuB3B,MAAvB,CANH;AAOL,QAAA,QAAQ,EAAE,KAAKQ,QAAL,CAAcmB,IAAd,CAAmB,IAAnB,EAAyB/B,KAAzB,CAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAeD,KAjBA,CADH,CATF,EA+BE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKO,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BF,EAkCE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE,KADf;AAEE,MAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWuB,WAFrB;AAGE,MAAA,WAAW,EAAE,KAAK0B,qBAHpB;AAIE,MAAA,cAAc,EAAE,KAAKtC,UAJvB;AAKE,MAAA,SAAS,EAAC,OALZ;AAQE,MAAA,YAAY,EAAC,eARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKA,UAAtB;AAAkC,MAAA,SAAS,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGE;AAAI,MAAA,GAAG,EAAEe,QAAQ,IAAI,KAAKA,QAAL,GAAgBA,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHF,CAZF,EAkBE;AAAM,MAAA,QAAQ,EAAE,KAAKvC,QAAL,CAAc6D,IAAd,CAAmB,IAAnB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,OAAtB;AAA8B,MAAA,IAAI,EAAC,OAAnC;AAA2C,MAAA,GAAG,EAAC,OAA/C;AAAuD,MAAA,YAAY,EAAE,KAAKhD,KAAL,CAAWsB,QAAX,CAAoBW,KAAzF;AAAgG,MAAA,WAAW,EAAC,UAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,OAAtB;AAA8B,MAAA,IAAI,EAAC,WAAnC;AAA+C,MAAA,YAAY,EAAE,KAAKjC,KAAL,CAAWsB,QAAX,CAAoBgB,SAAjF;AAA4F,MAAA,WAAW,EAAC,aAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAPF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAU,MAAA,IAAI,EAAC,UAAf;AAA0B,MAAA,IAAI,EAAC,IAA/B;AAAoC,MAAA,IAAI,EAAC,IAAzC;AAA8C,MAAA,EAAE,EAAC,WAAjD;AAA6D,MAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsB,QAAX,CAAoBkB,SAA/F;AAA0G,MAAA,SAAS,EAAC,UAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAIE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,UAA1B;AAAqC,MAAA,YAAY,EAAE,KAAKxC,KAAL,CAAWC,KAAX,CAAiBiD,OAAjB,CAAyB,KAAKlD,KAAL,CAAWsB,QAApC,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,KAA1B;AAAgC,MAAA,YAAY,EAAG,KAAKtB,KAAL,CAAWsB,QAAX,CAAoB1B,GAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAOE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAoC,MAAA,IAAI,EAAC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAXF,CAlBF,CAlCF,CAFF;AAqFD;;AAxUyB;;AA6U5B,eAAeZ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Header from './components/header';\n\nimport CRUDs from './components/corpo/crud.js';\nimport Footer from './components/footer/footer.js';\nimport './components/footer/index.css';\n\nimport './App.css';\nimport '../node_modules/flexboxgrid/css/flexboxgrid.min.css';\nimport Modal from 'react-modal';\nimport Axios from 'axios';\nimport Configs from './config';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      unsfinished: 0,\n      finished: 0,\n      taskAtrr: '',\n      concluir: 'Resolvido',\n\n      modalIsOpen: false,\n      tasks: []\n    }\n\n    this.unsfinished();\n    this.finished();\n\n\n\n\n\n  }\n\n\n\n  async componentDidMount() {\n    // fetch('http://localhost:3000/tasks')\n    // .then(res => res.json())\n    // .then(result => {\n    //   this.setState({tasks: result})\n    // })\n    // ,error => console.log(error)\n    // Axios.get(Configs.urlToServer)\n    // .then(response =>{\n    //   this.setState({tasks: response.data})\n    // })\n    // .catch(error =>{\n    //   console.log(error);\n    // })\n\n    let response = await Axios.get(Configs.urlToServer);\n    this.setState({ tasks: response.data })\n  }\n\n\n\n  updateTask  (id, position, event){\n    console.log(event);\n    \n\n    let newtask = {\n      _id: id,\n      title: event.target.title.value,\n      status: false\n      \n    }\n   \n\n    console.log(newtask);\n    Axios.put(Configs.urlToServer, { task: newtask });\n      event.preventDefault();\n        \n        let dados = [...this.state.tasks];\n        dados[position] = this.newCruds(event);\n       \n        this.setState({ tasks: dados });\n\n\n      this.closeModal();\n\n  }\n\n  // filterValue = (id) => {\n\n\n  //   return this.state.tasks.find = (tasks) => {\n  //     return tasks._id = id;\n\n  //   }\n  // }\n\n  saveTask=(event)=> {\n    event.preventDefault();\n    console.log(event);\n    let position = event.target.position.value;\n    let id = event.target._id.value;\n\n    if (position !== '-1') {\n      this.updateTask(id, position, event)\n    } else {\n\n      this.createCruds(event);\n    }\n\n\n\n  }\n\n\n  newCruds(event) {\n    let crud = {\n\n      title: event.target.title.value,\n      categoria: event.target.categoria.value,\n      textarea: event.target.textarea.value,\n      descricao: event.target.descricao.value,\n\n      status: true\n    }\n    return crud;\n  }\n\n  async unsfinished() {\n    let a = await this.counterTask(true);\n    console.log(a);\n    this.setState({ unsfinished: a });\n\n  }\n  async finished() {\n    let a = await this.counterTask(false);\n    this.setState({ finished: a })\n  }\n\n  async counterTask(type = true) {\n    let counter = await Axios.get(Configs.urlToServer + '/counter?type=' + type);\n    return counter.data;\n  }\n\n\n  createCruds = (event) => {\n    event.preventDefault();\n\n\n    let cruds = [...this.state.tasks];\n\n\n    Axios.post(Configs.urlToServer, { task: this.newCruds(event) })\n      .then(response => {\n        cruds.push(response.data);\n\n\n        this.setState({ tasks: cruds });\n        this.closeModal();\n        console.log(response);\n        this.unsfinished();\n\n      })\n      .catch(error => {\n        console.log(error);\n      })\n\n\n\n    this.finished();\n\n\n    this.closeModal();\n\n  }\n\n\n  delete = (index) => {\n\n    let task = this.state.tasks;\n\n\n    Axios.delete(Configs.urlDeletar, { index })\n      .then(response => {\n\n        task.splice(index, 1);\n        this.setState({ task: task });\n        console.log(response);\n        this.unsfinished();\n        this.finished();\n\n\n      })\n\n  }\n\n  editar = (tarefa) => {\n\n    this.setState({ taskAtrr: tarefa });\n    this.setState({ modalIsOpen: true });\n\n\n    // console.log(\"Editando\");\n  }\n\n  concluir(index) {\n\n    let task = this.state.tasks;\n\n    //task.splice(index, 1);\n    // this.setState({ task: task })\n    alert('Tarefa Resolvida');\n\n    console.log('Concluindo');\n    // this.unsfinished();\n    // this.finished();\n\n    Axios.put(Configs.urlToServer, { tasks: task })\n      .then(response => {\n\n        task.splice(index, 1);\n\n        this.setState({ tasks: task });\n        // this.setState({status:false});\n        console.log(response);\n        this.finished();\n        this.unsfinished();\n\n\n      })\n\n  }\n\n\n\n\n  openModal = () => {\n\n    this.setState({ modalIsOpen: true });\n\n  }\n\n  afterOpenModal = () => {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = '#f00';\n\n\n  }\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  }\n\n\n\n\n  render() {\n\n    return (\n\n      <div className=\"App\">\n\n        <Header title=\"Gerencidor de Apps\"\n          unsfinished={this.state.unsfinished}\n          finished={this.state.finished}\n\n        />\n\n\n        <div className=\"CRUDs row\"  >\n          {this.state.tasks.map((tarefa, index) => {\n\n            return < CRUDs\n\n              key={index}\n              value={tarefa}\n              className=\"col-xs-12 col-sm-8 col-md-6 col-lg-4\"\n              delete={this.delete.bind(this, index)}\n              editar={this.editar.bind(this, tarefa)}\n              concluir={this.concluir.bind(this, index)}\n\n\n            />\n\n\n\n\n          })}\n\n        </div>\n\n        <Footer onClick={this.openModal} ></Footer>\n\n\n        <Modal\n          ariaHideApp={false}\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModtabelasal}\n          onRequestClose={this.closeModal}\n          className=\"Modal\"\n\n\n          contentLabel=\"Example Modal\"\n\n\n        >\n          <div>\n            <button onClick={this.closeModal} className=\"close\" > x </button>\n\n            <h2 ref={subtitle => this.subtitle = subtitle}>Adicionar Tarefas</h2>\n          </div>\n\n          <form onSubmit={this.saveTask.bind(this)}  >\n            <div>\n\n\n              <label htmlFor=\"title\">Titulo</label>\n              <input type=\"text\" id=\"title\" name=\"title\" ref=\"title\" defaultValue={this.state.taskAtrr.title} placeholder=\"Titulo..\" />\n            </div>\n            <div>\n              <label htmlFor=\"categoria\">Categoria</label>\n              <input type=\"text\" id=\"lname\" name=\"categoria\" defaultValue={this.state.taskAtrr.categoria} placeholder=\"Categoria..\" />\n            </div>\n            <div>\n              <label htmlFor=\"descricao\">Descrição</label>\n              <textarea name=\"textarea\" rows=\"10\" cols=\"94\" id=\"descricao\" defaultValue={this.state.taskAtrr.descricao} className=\"textarea\" ></textarea>\n\n              <input type=\"hidden\" name=\"position\" defaultValue={this.state.tasks.indexOf(this.state.taskAtrr)} />\n              <input type=\"hidden\" name=\"_id\" defaultValue={(this.state.taskAtrr._id)} />\n\n              <input type=\"submit\" value=\"Enviar\" name=\"bt\" />\n            </div>\n          </form>\n\n\n\n        </Modal>\n\n      </div>\n\n    );\n\n\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}