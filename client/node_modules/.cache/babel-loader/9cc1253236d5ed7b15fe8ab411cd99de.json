{"ast":null,"code":"var _jsxFileName = \"/root/Documents/testapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from './components/header';\nimport CRUDs from './components/corpo/crud.js';\nimport Footer from './components/footer/footer.js';\nimport './components/footer/index.css';\nimport './App.css';\nimport '../node_modules/flexboxgrid/css/flexboxgrid.min.css';\nimport Modal from 'react-modal';\nimport Axios from 'axios';\nimport Configs from './config';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delete = index => {\n      let task = this.state.tasks;\n      Axios.delete(Configs.urlDeletar, {\n        index\n      }).then(response => {\n        task.splice(index, 1);\n        this.setState({\n          task: task\n        });\n        console.log(response);\n        this.unsfinished();\n        this.finished();\n      });\n    };\n\n    this.editar = tarefa => {\n      this.setState({\n        taskAtrr: tarefa\n      });\n      this.setState({\n        modalIsOpen: true\n      }); // console.log(\"Editando\");\n    };\n\n    this.openModal = () => {\n      this.setState({\n        modalIsOpen: true\n      });\n    };\n\n    this.afterOpenModal = () => {\n      // references are now sync'd and can be accessed.\n      this.subtitle.style.color = '#f00';\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        modalIsOpen: false\n      });\n    };\n\n    this.state = {\n      unsfinished: 0,\n      finished: 0,\n      taskAtrr: '',\n      concluir: 'Resolvido',\n      modalIsOpen: false,\n      tasks: []\n    };\n    this.unsfinished();\n    this.finished();\n    this.createCruds = this.createCruds.bind(this);\n  }\n\n  async componentDidMount() {\n    // fetch('http://localhost:3000/tasks')\n    // .then(res => res.json())\n    // .then(result => {\n    //   this.setState({tasks: result})\n    // })\n    // ,error => console.log(error)\n    // Axios.get(Configs.urlToServer)\n    // .then(response =>{\n    //   this.setState({tasks: response.data})\n    // })\n    // .catch(error =>{\n    //   console.log(error);\n    // })\n    let response = await Axios.get(Configs.urlToServer);\n    this.setState({\n      tasks: response.data\n    });\n  }\n\n  saveTask(event) {\n    event.preventDefault();\n    let position = event.target.position.value;\n\n    if (position !== '-1') {\n      this.updateTask(position, event);\n    } else {\n      this.createCruds(event);\n    }\n  }\n\n  updateTask(tarefa, event) {\n    event.preventDefault();\n    this.setState({\n      taskAtrr: ''\n    }); // this.setState({tasks:cruds})\n    // console.log({cruds})\n    // this.closeModal();\n    // let cruds = [...this.state.tasks];\n\n    tarefa = event.target._id;\n    let cruds = this.state.tasks;\n    cruds = this.newCruds(event);\n    console.log(cruds + \" Pegar o Id\");\n    Axios.put(Configs.urlToServer, {\n      task: tarefa\n    }).then(response => {\n      this.setState({\n        tasks: cruds\n      });\n      console.log(response);\n    });\n    this.closeModal();\n  }\n\n  newCruds(event) {\n    let crud = {\n      title: event.target.title.value,\n      categoria: event.target.categoria.value,\n      textarea: event.target.textarea.value,\n      descricao: event.target.descricao.value,\n      status: true\n    };\n    return crud;\n  }\n\n  async unsfinished() {\n    let a = await this.counterTask(true);\n    console.log(a);\n    this.setState({\n      unsfinished: a\n    });\n  }\n\n  async finished() {\n    let a = await this.counterTask(false);\n    this.setState({\n      finished: a\n    });\n  }\n\n  async counterTask(type = true) {\n    let counter = await Axios.get(Configs.urlToServer + '/counter?type=' + type);\n    return counter.data;\n  }\n\n  createCruds(event) {\n    event.preventDefault();\n    let cruds = [...this.state.tasks];\n    Axios.post(Configs.urlToServer, {\n      task: this.newCruds(event)\n    }).then(response => {\n      cruds.push(response.data);\n      this.setState({\n        tasks: cruds\n      });\n      this.closeModal();\n      console.log(response);\n      this.unsfinished();\n    }).catch(error => {\n      console.log(error);\n    });\n    this.finished();\n    this.closeModal();\n  }\n\n  concluir(index) {\n    let task = this.state.tasks; //task.splice(index, 1);\n    // this.setState({ task: task })\n\n    alert('Tarefa Resolvida');\n    console.log('Concluindo'); // this.unsfinished();\n    // this.finished();\n\n    Axios.put(Configs.urlToServer, {\n      tasks: task\n    }).then(response => {\n      task.splice(index, 1);\n      this.setState({\n        tasks: task\n      }); // this.setState({status:false});\n\n      console.log(response);\n      this.finished();\n      this.unsfinished();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Gerencidor de Apps\",\n      unsfinished: this.state.unsfinished,\n      finished: this.state.finished,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"CRUDs row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.state.tasks.map((tarefa, index) => {\n      return React.createElement(CRUDs, {\n        key: index,\n        value: tarefa,\n        className: \"col-xs-12 col-sm-8 col-md-6 col-lg-4\",\n        delete: this.delete.bind(this, index),\n        editar: this.editar.bind(this, tarefa),\n        concluir: this.concluir.bind(this, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      });\n    })), React.createElement(Footer, {\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      ariaHideApp: false,\n      isOpen: this.state.modalIsOpen,\n      onAfterOpen: this.afterOpenModtabelasal,\n      onRequestClose: this.closeModal,\n      className: \"Modal\",\n      contentLabel: \"Example Modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.closeModal,\n      className: \"close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \" x \"), React.createElement(\"h2\", {\n      ref: subtitle => this.subtitle = subtitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Adicionar Tarefas\")), React.createElement(\"form\", {\n      onSubmit: this.saveTask.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Titulo\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      ref: \"title\",\n      defaultValue: this.state.taskAtrr.title,\n      placeholder: \"Titulo..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"categoria\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Categoria\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"lname\",\n      name: \"categoria\",\n      defaultValue: this.state.taskAtrr.categoria,\n      placeholder: \"Categoria..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"descricao\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Descri\\xE7\\xE3o\"), React.createElement(\"textarea\", {\n      name: \"textarea\",\n      rows: \"10\",\n      cols: \"94\",\n      id: \"descricao\",\n      defaultValue: this.state.taskAtrr.descricao,\n      className: \"textarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"position\",\n      defaultValue: this.state.tasks.indexOf(this.state.taskAtrr),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"id\",\n      defaultValue: this.state.tasks.indexOf(this.state.taskAtrr._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Enviar\",\n      name: \"bt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/root/Documents/testapp/client/src/App.js"],"names":["React","Component","Header","CRUDs","Footer","Modal","Axios","Configs","App","constructor","props","delete","index","task","state","tasks","urlDeletar","then","response","splice","setState","console","log","unsfinished","finished","editar","tarefa","taskAtrr","modalIsOpen","openModal","afterOpenModal","subtitle","style","color","closeModal","concluir","createCruds","bind","componentDidMount","get","urlToServer","data","saveTask","event","preventDefault","position","target","value","updateTask","_id","cruds","newCruds","put","crud","title","categoria","textarea","descricao","status","a","counterTask","type","counter","post","push","catch","error","alert","render","map","afterOpenModtabelasal","indexOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from './components/header';\n\nimport CRUDs from './components/corpo/crud.js';\nimport Footer from './components/footer/footer.js';\nimport './components/footer/index.css';\n\nimport './App.css';\nimport '../node_modules/flexboxgrid/css/flexboxgrid.min.css';\nimport Modal from 'react-modal';\nimport Axios from 'axios';\nimport Configs from './config';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      unsfinished: 0,\n      finished: 0,\n      taskAtrr: '',\n      concluir: 'Resolvido',\n     \n      modalIsOpen: false,\n      tasks: []\n    }\n\n    this.unsfinished();\n    this.finished();\n\n    this.createCruds = this.createCruds.bind(this);\n\n\n\n  }\n  \n\n\n  async componentDidMount() {\n    // fetch('http://localhost:3000/tasks')\n    // .then(res => res.json())\n    // .then(result => {\n    //   this.setState({tasks: result})\n    // })\n    // ,error => console.log(error)\n    // Axios.get(Configs.urlToServer)\n    // .then(response =>{\n    //   this.setState({tasks: response.data})\n    // })\n    // .catch(error =>{\n    //   console.log(error);\n    // })\n\n    let response = await Axios.get(Configs.urlToServer);\n    this.setState({ tasks: response.data })\n  }\n\n\n\n\n  saveTask(event) {\n    event.preventDefault();\n    let position = event.target.position.value;\n    if (position !== '-1') {\n      this.updateTask(position, event)\n    } else {\n\n      this.createCruds(event);\n    }\n\n\n\n  }\n\n  updateTask( tarefa,event) {\n\n    event.preventDefault();\n    this.setState({ taskAtrr: '' });\n\n    // this.setState({tasks:cruds})\n    // console.log({cruds})\n    // this.closeModal();\n  \n    // let cruds = [...this.state.tasks];\n  tarefa = event.target._id; \n   let cruds= this.state.tasks;\n   cruds = this.newCruds(event); \n   console.log(cruds+\" Pegar o Id\");\n \n    Axios.put(Configs.urlToServer, {task:tarefa})\n      .then(response => {\n      \n        this.setState({ tasks: cruds });\n\n\n        console.log(response);\n\n\n      })\n    this.closeModal();\n\n\n  }\n\n  newCruds(event) {\n    let crud = {\n      title: event.target.title.value,\n      categoria: event.target.categoria.value,\n      textarea: event.target.textarea.value,\n      descricao: event.target.descricao.value,\n\n      status: true\n    }\n    return crud;\n  }\n\n  async unsfinished() {\n    let a = await this.counterTask(true);\n    console.log(a);\n    this.setState({ unsfinished: a });\n\n  }\n  async finished() {\n    let a = await this.counterTask(false);\n    this.setState({ finished: a })\n  }\n\n  async counterTask(type = true) {\n    let counter = await Axios.get(Configs.urlToServer + '/counter?type=' + type);\n    return counter.data;\n  }\n\n\n  createCruds(event) {\n    event.preventDefault();\n\n\n    let cruds = [...this.state.tasks];\n\n\n    Axios.post(Configs.urlToServer, { task: this.newCruds(event) })\n      .then(response => {\n        cruds.push(response.data);\n\n\n        this.setState({ tasks: cruds });\n        this.closeModal();\n        console.log(response);\n        this.unsfinished();\n\n      })\n      .catch(error => {\n        console.log(error);\n      })\n\n\n\n    this.finished();\n\n\n    this.closeModal();\n\n  }\n\n\n  delete = (index) => {\n\n    let task = this.state.tasks;\n\n\n    Axios.delete(Configs.urlDeletar, { index })\n      .then(response => {\n\n        task.splice(index, 1);\n        this.setState({ task: task });\n        console.log(response);\n        this.unsfinished();\n        this.finished();\n\n\n      })\n\n  }\n\n  editar = (tarefa) => {\n\n    this.setState({ taskAtrr: tarefa });\n    this.setState({ modalIsOpen: true });\n\n\n    // console.log(\"Editando\");\n  }\n\n  concluir(index) {\n\n    let task = this.state.tasks;\n   \n     //task.splice(index, 1);\n    // this.setState({ task: task })\n    alert('Tarefa Resolvida');\n\n     console.log('Concluindo');\n    // this.unsfinished();\n    // this.finished();\n\n    Axios.put(Configs.urlToServer, { tasks:task })\n    .then(response => {\n\n      task.splice(index, 1);\n      \n      this.setState({ tasks: task });\n     // this.setState({status:false});\n      console.log(response);\n      this.finished();\n     this.unsfinished();\n      \n\n    })\n   \n  }\n\n\n\n\n  openModal = () => {\n\n    this.setState({ modalIsOpen: true });\n\n  }\n\n  afterOpenModal = () => {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = '#f00';\n\n\n  }\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  }\n\n  \n\n\n  render() {\n\n    return (\n\n      <div className=\"App\">\n\n        <Header title=\"Gerencidor de Apps\"\n          unsfinished={this.state.unsfinished}\n          finished={this.state.finished}\n\n        />\n        \n\n        <div className=\"CRUDs row\"  >\n          {this.state.tasks.map((tarefa, index) => {\n\n            return < CRUDs\n           \n              key={index}\n              value={tarefa}\n              className=\"col-xs-12 col-sm-8 col-md-6 col-lg-4\"\n              delete={this.delete.bind(this, index)}\n              editar={this.editar.bind(this, tarefa)}\n              concluir={this.concluir.bind(this, index)}\n              \n\n            />\n\n\n\n\n          })}\n\n        </div>\n\n        <Footer onClick={this.openModal} ></Footer>\n\n\n        <Modal\n          ariaHideApp={false}\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModtabelasal}\n          onRequestClose={this.closeModal}\n          className=\"Modal\"\n\n\n          contentLabel=\"Example Modal\"\n\n\n        >\n          <div>\n            <button onClick={this.closeModal} className=\"close\" > x </button>\n\n            <h2 ref={subtitle => this.subtitle = subtitle}>Adicionar Tarefas</h2>\n          </div>\n\n          <form onSubmit={this.saveTask.bind(this)}  >\n            <div>\n\n\n              <label htmlFor=\"title\">Titulo</label>\n              <input type=\"text\" id=\"title\" name=\"title\" ref=\"title\" defaultValue={this.state.taskAtrr.title} placeholder=\"Titulo..\" />\n            </div>\n            <div>\n              <label htmlFor=\"categoria\">Categoria</label>\n              <input type=\"text\" id=\"lname\" name=\"categoria\" defaultValue={this.state.taskAtrr.categoria} placeholder=\"Categoria..\" />\n            </div>\n            <div>\n              <label htmlFor=\"descricao\">Descrição</label>\n              <textarea name=\"textarea\" rows=\"10\" cols=\"94\" id=\"descricao\" defaultValue={this.state.taskAtrr.descricao} className=\"textarea\" ></textarea>\n\n              <input type=\"hidden\" name=\"position\" defaultValue={this.state.tasks.indexOf(this.state.taskAtrr)} />\n              <input type=\"hidden\" name=\"id\" defaultValue={this.state.tasks.indexOf(this.state.taskAtrr._id)} />\n\n              <input type=\"submit\" value=\"Enviar\" name=\"bt\" />\n            </div>\n          </form>\n\n\n\n        </Modal>\n\n\n\n\n\n      </div>\n\n    );\n\n\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}